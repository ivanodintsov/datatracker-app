type Average {
  daily: NFormatNumber
  hours: NFormatNumber
}

type PercentageChange {
  total: Percentage
  members_count: Percentage
}

type SubtractChange {
  total: NFormatNumber
  members_count: NFormatNumber
}

type ChatStatistics {
  chat: Float!
  text: NFormatNumber
  voice: NFormatNumber
  video_note: NFormatNumber
  sticker: NFormatNumber
  video: NFormatNumber
  audio: NFormatNumber
  document: NFormatNumber
  photo: NFormatNumber
  reply: NFormatNumber
  forward: NFormatNumber
  edit: NFormatNumber
  pinned: NFormatNumber
  contact: NFormatNumber
  location: NFormatNumber
  game: NFormatNumber
  venue: NFormatNumber
  invoice: NFormatNumber
  channel_chat_created: NFormatNumber
  supergroup_chat_created: NFormatNumber
  group_chat_created: NFormatNumber
  migrate_to_chat: NFormatNumber
  left_chat_member: NFormatNumber
  new_chat_members: NFormatNumber
  new_chat_photo: NFormatNumber
  new_chat_title: NFormatNumber
  total: NFormatNumber
  date: Date
  activeDays: Int
  day: Int
  hour: Int
  avg: Average
  percentage_change: PercentageChange
  subtract_change: SubtractChange
  members_count: NFormatNumber
}

type ChatUsersActivity {
  date: Date!
  users: Int,
  text: Int
}

type ChatFullStatistics {
  chatStatistics: ChatStatistics
  usersStatistics: [Statistics]
  usersActivityStatistics: [ChatUsersActivity]
  hourlyStatistics: [ChatStatistics]
  weekDaysStatistics: [ChatStatistics]
}

type ChatHourlyStatistics {
  data: [ChatStatistics]
  range: Range
}

type Query {
  chatStatistics4days(chat: Float!): [ChatStatistics]
  chatUsersActivity(chat: Float!, range: [Date]!, timeZone: String): [ChatUsersActivity]
  chatHourlyStatistics(chat: Float!): ChatHourlyStatistics
  chatFullStatistics(chat: Float!, range: [Date]!, timeZone: String): ChatFullStatistics
}
