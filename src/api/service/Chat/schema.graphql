type ChatPhoto {
  small_file_id: String
  big_file_id: String
  small_file: String
  big_file: String
}

type Chat {
  _id: ID
  id: Float!
  type: String!
  title: String
  username: String
  first_name: String
  last_name: String
  all_members_are_administrators: Boolean
  photo: ChatPhoto
  description: String
  invite_link: String
  pinned_message: Message
  sticker_set_name: String
  can_set_sticker_set: Boolean
  members_count: Int
  statistics: ChatStatistics
}

type ChatStatistics {
  text: NFormatNumber
  voice: NFormatNumber
  video_note: NFormatNumber
  video: NFormatNumber
  sticker: NFormatNumber
  pinned: NFormatNumber
  audio: NFormatNumber
  document: NFormatNumber
  photo: NFormatNumber
  reply: NFormatNumber
  forward: NFormatNumber
  edit: NFormatNumber
  total: NFormatNumber
  contact: NFormatNumber
  location: NFormatNumber
  game: NFormatNumber
  venue: NFormatNumber
  invoice: NFormatNumber
  channel_chat_created: NFormatNumber
  supergroup_chat_created: NFormatNumber
  group_chat_created: NFormatNumber
  migrate_to_chat: NFormatNumber
  left_chat_member: NFormatNumber
  new_chat_members: NFormatNumber
  new_chat_photo: NFormatNumber
}

type Statistics {
  from: User
  text: Int
  reply: Int
  forward: Int
  edit: Int
  total: Int
}

input ChatPhotoInput {
  small_file_id: String!
  big_file_id: String!
  small_file: String
  big_file: String
}

input ChatInput {
  id: Float!
  type: String!
  title: String
  username: String
  first_name: String
  last_name: String
  all_members_are_administrators: Boolean
  photo: ChatPhotoInput
  description: String
  invite_link: String
  pinned_message: MessageInput
  sticker_set_name: String
  can_set_sticker_set: Boolean
  members_count: Int
}

input ChatUpdateInput {
  id: Float
  type: String
  title: String
  username: String
  first_name: String
  last_name: String
  all_members_are_administrators: Boolean
  photo: ChatPhotoInput
  description: String
  invite_link: String
  pinned_message: MessageInput
  sticker_set_name: String
  can_set_sticker_set: Boolean
  members_count: Int
  statistics: StatisticsBaseInput
  cron_updated_at: Date
  is_active: Boolean
}

type UserAction {
  members_count: Int!
}

type Query {
  allChats: [Chat]
  findChatById(id: Float!): Chat
  chatStatistics(id: Float!): ChatStatistics
  notUpdatedChats(days: Int!, limit: Int!): [Chat]
}

type Mutation {
  createChat(input: ChatInput): Chat
  migrateChat(id: Float!, input: ChatUpdateInput!): Chat
  updateChat(id: Float!, input: ChatUpdateInput!): Chat
  newUsers(id: Float!, members_count: Int!): UserAction
  leftUser(id: Float!): UserAction
}
